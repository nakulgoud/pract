//====================================
Naive recursive approach:
Exponential time. Consider case of fibonnaci.  

//====================================
Approach #1: Top down
Dynamic programming is all about:
    1. memoization (remember solution)
    2. reuse memoized solutions to solve bigger problems

DP = recursion + memoization
time = (# of subproblems) * (time per sub problem)
i.e. time = n * O(1) = O(n)

    memo = {}
    fib(n):
        if n in memo:
            return memo[n]
        if n <= 2:
            f = 1
        else:
            f = fib(n-1) + fib(n-2)

        memo[n] = f
        return f

//====================================
Approach #2: Bottom up

Does topological sort of subproblem dependency DAG (Directed Acyclic Graph)
i.e. to compute f(n), we need to compute f(n-1) first. To compute f(n-1),
we need to compute f(n-2) first. 
    fib = {} # memoization
    for k in range(1, n+1):
        if k<=2:
            f = 1
        else:
            f = fib[k-1] + fib[k-2] # reuse
        fib[k] = f

    return fib[n]
